package bitmapfonteditor;

import java.awt.*;
import java.awt.event.*;
import javax.swing.event.*;

/**
 *
 * @author l4l
 */
public class FontPreviewer extends javax.swing.JPanel implements AdjustmentListener, ChangeListener, ItemListener {

    Color clrBackground = Color.WHITE;
    Color clrForeground = Color.BLACK;
    Color clrText = Color.BLACK;
    Color clrLines = Color.BLACK;
    Color clrBoxLines = Color.GRAY;
    Color clrAscent = Color.RED;
    Color clrDescent = Color.BLUE;
    
    int codepointUpperLeft = 0;
    

    private int glyphHeight = 16;
    private int glyphWidth = 8;

    private int headerHeight = 15;
    private int footerHeight = 5;

    private int leftMarginWidth = 3;
    private int rightMarginWidth = 3;

    private int maxColumnsVisible = 1;
    private int maxRowsVisible = 1;

    public FontPreviewer() {
        initComponents();
        initFont();
    }

        
    public int getBoxHeight() {
        return getGlyphHeight() + getFooterHeight() + getHeaderHeight();
    }
    
    public int getBoxWidth() {
        return getGlyphWidth() + getLeftMarginWidth() + getRightMarginWidth();
    }
    
    @Override
    public void adjustmentValueChanged(AdjustmentEvent e) {
        repaint();
    }
    
    @Override
    public void stateChanged(ChangeEvent e) {
        repaint();
    }
    
    @Override
    public void itemStateChanged(ItemEvent e) {
        repaint();
    }
    
    @Override
    protected void paintComponent(Graphics g1) {
        Graphics2D g = (Graphics2D) g1;
        
        g.setColor(clrBackground);
        g.fillRect(0, 0, getWidth(), getHeight());
        
        setMaxColumnsVisible((int) Math.floor((double) getWidth() / getBoxWidth()));
        setMaxRowsVisible((int) Math.floor((double) getHeight() / getBoxHeight()));
        
        int maxWidth = maxColumnsVisible * getBoxWidth();
        int maxHeight = maxRowsVisible * getBoxHeight();

        // gray dividers inside a box
        g.setColor(clrBoxLines);
        for (int j = 0; j <= maxRowsVisible; j++) {
            int yHeader = j * getBoxHeight() + getHeaderHeight();
            g.drawLine(0, yHeader, maxWidth, yHeader);
        }

        // lines
        g.setColor(clrLines);
        // vertical lines
        for (int i = 0; i <= maxColumnsVisible; i++)
            g.drawLine(i * getBoxWidth(), 0, i * getBoxWidth(), maxHeight);

        // horisontal lines
        for (int j = 0; j <= maxRowsVisible; j++)
            g.drawLine(0, j * getBoxHeight(), maxWidth, j * getBoxHeight());
        
        for (int i = 0; i < maxColumnsVisible; i++)
            for (int j = 0; j < maxRowsVisible; j++)
                drawBox(g, i, j);

        //Font fnt = g.getFont();
    }
    
    private void drawBox(Graphics2D g, int i, int j) {
        char codepoint = (char)(codepointUpperLeft + i + j * getMaxColumnsVisible());
        g.drawString(
            Character.toString(codepoint), 
            i * getBoxWidth() + getBoxWidth() / 2f, 
            j * getBoxHeight() + getHeaderHeight()
        );
    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void initFont() {
        
    }

    public int getFooterHeight() {
        return footerHeight;
    }

    public void setFooterHeight(int footerHeight) {
        this.footerHeight = footerHeight;
    }

    public int getGlyphHeight() {
        return glyphHeight;
    }

    public void setGlyphHeight(int glyphHeight) {
        this.glyphHeight = glyphHeight;
    }

    public int getGlyphWidth() {
        return glyphWidth;
    }

    public void setGlyphWidth(int glyphWidth) {
        this.glyphWidth = glyphWidth;
    }

    public int getHeaderHeight() {
        return headerHeight;
    }

    public void setHeaderHeight(int headerHeight) {
        this.headerHeight = headerHeight;
    }

    public int getLeftMarginWidth() {
        return leftMarginWidth;
    }

    public void setLeftMarginWidth(int leftMarginWidth) {
        this.leftMarginWidth = leftMarginWidth;
    }

    public int getRightMarginWidth() {
        return rightMarginWidth;
    }

    public void setRightMarginWidth(int rightMarginWidth) {
        this.rightMarginWidth = rightMarginWidth;
    }

    public int getMaxColumnsVisible() {
        return maxColumnsVisible;
    }

    public void setMaxColumnsVisible(int maxColumnsVisible) {
        this.maxColumnsVisible = maxColumnsVisible;
    }

    public int getMaxRowsVisible() {
        return maxRowsVisible;
    }

    public void setMaxRowsVisible(int maxRowsVisible) {
        this.maxRowsVisible = maxRowsVisible;
    }
}
